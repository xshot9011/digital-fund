////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : main2.vf
// /___/   /\     Timestamp : 11/25/2019 11:51:00
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog E:/Programs/ISE/preTest/main2.vf -w E:/Programs/ISE/preTest/main2.sch
//Design Name: main2
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module encoder_MUSER_main2(A, 
                           Q);

    input [3:0] A;
   output [3:0] Q;
   
   wire XLXN_5;
   wire XLXN_12;
   wire XLXN_14;
   wire XLXN_16;
   wire XLXN_18;
   wire XLXN_19;
   wire XLXN_20;
   wire XLXN_21;
   wire XLXN_26;
   wire XLXN_27;
   wire XLXN_40;
   wire XLXN_41;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_47;
   wire XLXN_48;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   
   INV  XLXI_1 (.I(A[3]), 
               .O(XLXN_12));
   INV  XLXI_2 (.I(A[2]), 
               .O(XLXN_16));
   INV  XLXI_3 (.I(A[1]), 
               .O(XLXN_14));
   INV  XLXI_4 (.I(A[0]), 
               .O(XLXN_5));
   AND4  XLXI_5 (.I0(XLXN_5), 
                .I1(XLXN_14), 
                .I2(XLXN_16), 
                .I3(XLXN_12), 
                .O(XLXN_18));
   AND4  XLXI_6 (.I0(XLXN_5), 
                .I1(XLXN_14), 
                .I2(A[2]), 
                .I3(XLXN_12), 
                .O(XLXN_45));
   AND4  XLXI_7 (.I0(A[0]), 
                .I1(XLXN_14), 
                .I2(XLXN_16), 
                .I3(XLXN_12), 
                .O(XLXN_19));
   AND4  XLXI_8 (.I0(XLXN_5), 
                .I1(A[1]), 
                .I2(XLXN_16), 
                .I3(A[3]), 
                .O(XLXN_20));
   AND4  XLXI_9 (.I0(A[0]), 
                .I1(A[1]), 
                .I2(XLXN_16), 
                .I3(A[3]), 
                .O(XLXN_21));
   OR4  XLXI_10 (.I0(XLXN_48), 
                .I1(XLXN_47), 
                .I2(XLXN_46), 
                .I3(XLXN_45), 
                .O(XLXN_66));
   OR4  XLXI_12 (.I0(XLXN_21), 
                .I1(XLXN_20), 
                .I2(XLXN_19), 
                .I3(XLXN_18), 
                .O(XLXN_63));
   AND4  XLXI_13 (.I0(XLXN_5), 
                 .I1(A[1]), 
                 .I2(XLXN_16), 
                 .I3(XLXN_12), 
                 .O(XLXN_26));
   AND4  XLXI_14 (.I0(A[0]), 
                 .I1(XLXN_14), 
                 .I2(XLXN_16), 
                 .I3(A[3]), 
                 .O(XLXN_27));
   OR2  XLXI_15 (.I0(XLXN_27), 
                .I1(XLXN_26), 
                .O(XLXN_64));
   OR2  XLXI_18 (.I0(XLXN_41), 
                .I1(XLXN_40), 
                .O(XLXN_65));
   AND4  XLXI_19 (.I0(A[0]), 
                 .I1(XLXN_14), 
                 .I2(A[2]), 
                 .I3(XLXN_12), 
                 .O(XLXN_46));
   AND4  XLXI_20 (.I0(XLXN_5), 
                 .I1(A[1]), 
                 .I2(A[2]), 
                 .I3(XLXN_12), 
                 .O(XLXN_47));
   AND4  XLXI_21 (.I0(A[0]), 
                 .I1(A[1]), 
                 .I2(A[2]), 
                 .I3(XLXN_12), 
                 .O(XLXN_48));
   INV  XLXI_22 (.I(XLXN_63), 
                .O(Q[0]));
   INV  XLXI_23 (.I(XLXN_64), 
                .O(Q[1]));
   INV  XLXI_24 (.I(XLXN_65), 
                .O(Q[2]));
   INV  XLXI_25 (.I(XLXN_66), 
                .O(Q[3]));
   AND4  XLXI_26 (.I0(A[0]), 
                 .I1(A[1]), 
                 .I2(XLXN_16), 
                 .I3(XLXN_12), 
                 .O(XLXN_40));
   AND4  XLXI_27 (.I0(XLXN_5), 
                 .I1(XLXN_14), 
                 .I2(XLXN_16), 
                 .I3(A[3]), 
                 .O(XLXN_41));
endmodule
`timescale 1ns / 1ps

module main2(CLK, 
             Common, 
             seven);

    input CLK;
   output [3:0] Common;
   output [6:0] seven;
   
   wire XLXN_8;
   wire [3:0] XLXN_12;
   
   encoder_MUSER_main2  XLXI_1 (.A(XLXN_12[3:0]), 
                               .Q(Common[3:0]));
   to_1_2_10_100_1000Hz  XLXI_3 (.clockIn(CLK), 
                                .to1hz(XLXN_8), 
                                .to2hz(), 
                                .to10hz(), 
                                .to100hz(), 
                                .to1000hz());
   loopSeg  XLXI_4 (.Inn(XLXN_12[3:0]), 
                   .Outt(seven[6:0]));
   counter011  XLXI_5 (.clear(), 
                      .clk_in(XLXN_8), 
                      .divide_12(), 
                      .q(XLXN_12[3:0]), 
                      .XLXN_20());
endmodule
