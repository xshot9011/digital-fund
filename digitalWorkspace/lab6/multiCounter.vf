////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : multiCounter.vf
// /___/   /\     Timestamp : 11/18/2019 12:57:13
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/digitalWorkspace/lab6/multiCounter.vf -w C:/digitalWorkspace/lab6/multiCounter.sch
//Design Name: multiCounter
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module COMP4_HXILINX_multiCounter (EQ, A0, A1, A2, A3, B0, B1, B2, B3);
    

   output EQ;

   input A0;
   input A1;
   input A2;
   input A3;
   input B0;
   input B1;
   input B2;
   input B3;

   assign EQ = ((A0==B0) && (A1==B1) && (A2==B2) && (A3==B3)) ;

endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_multiCounter(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale 1ns / 1ps

module counter09_MUSER_multiCounter(CLOCK, 
                                    A, 
                                    B, 
                                    C, 
                                    D);

   (* CLOCK_DEDICATED_ROUTE = "TRUE" *) 
    input CLOCK;
   output A;
   output B;
   output C;
   output D;
   
   wire XLXN_2;
   wire XLXN_6;
   wire XLXN_11;
   wire XLXN_22;
   wire XLXN_26;
   wire A_DUMMY;
   wire B_DUMMY;
   wire C_DUMMY;
   wire D_DUMMY;
   
   assign A = A_DUMMY;
   assign B = B_DUMMY;
   assign C = C_DUMMY;
   assign D = D_DUMMY;
   (* HU_SET = "XLXI_5_26" *) 
   FJKC_HXILINX_multiCounter  XLXI_5 (.C(CLOCK), 
                                     .CLR(), 
                                     .J(XLXN_2), 
                                     .K(XLXN_2), 
                                     .Q(D_DUMMY));
   (* HU_SET = "XLXI_6_27" *) 
   FJKC_HXILINX_multiCounter  XLXI_6 (.C(CLOCK), 
                                     .CLR(), 
                                     .J(XLXN_11), 
                                     .K(D_DUMMY), 
                                     .Q(C_DUMMY));
   (* HU_SET = "XLXI_7_28" *) 
   FJKC_HXILINX_multiCounter  XLXI_7 (.C(CLOCK), 
                                     .CLR(), 
                                     .J(XLXN_22), 
                                     .K(XLXN_22), 
                                     .Q(B_DUMMY));
   (* HU_SET = "XLXI_8_29" *) 
   FJKC_HXILINX_multiCounter  XLXI_8 (.C(CLOCK), 
                                     .CLR(), 
                                     .J(XLXN_26), 
                                     .K(D_DUMMY), 
                                     .Q(A_DUMMY));
   VCC  XLXI_9 (.P(XLXN_2));
   AND2  XLXI_10 (.I0(XLXN_6), 
                 .I1(D_DUMMY), 
                 .O(XLXN_11));
   AND2  XLXI_11 (.I0(D_DUMMY), 
                 .I1(C_DUMMY), 
                 .O(XLXN_22));
   AND3  XLXI_12 (.I0(B_DUMMY), 
                 .I1(C_DUMMY), 
                 .I2(D_DUMMY), 
                 .O(XLXN_26));
   INV  XLXI_13 (.I(A_DUMMY), 
                .O(XLXN_6));
endmodule
`timescale 1ns / 1ps

module multiCounter(cl, 
                    increase_one, 
                    sw, 
                    a0, 
                    a1, 
                    b0, 
                    b1, 
                    c0, 
                    c1, 
                    d0, 
                    d1);

    input cl;
    input increase_one;
    input sw;
   output a0;
   output a1;
   output b0;
   output b1;
   output c0;
   output c1;
   output d0;
   output d1;
   
   wire XLXN_5;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_11;
   wire XLXN_12;
   wire a0_DUMMY;
   wire b0_DUMMY;
   wire c0_DUMMY;
   wire d0_DUMMY;
   
   assign a0 = a0_DUMMY;
   assign b0 = b0_DUMMY;
   assign c0 = c0_DUMMY;
   assign d0 = d0_DUMMY;
   counter09_MUSER_multiCounter  XLXI_1 (.CLOCK(XLXN_12), 
                                        .A(a0_DUMMY), 
                                        .B(b0_DUMMY), 
                                        .C(c0_DUMMY), 
                                        .D(d0_DUMMY));
   counter09_MUSER_multiCounter  XLXI_2 (.CLOCK(XLXN_8), 
                                        .A(a1), 
                                        .B(b1), 
                                        .C(c1), 
                                        .D(d1));
   (* HU_SET = "XLXI_3_30" *) 
   COMP4_HXILINX_multiCounter  XLXI_3 (.A0(a0_DUMMY), 
                                      .A1(c0_DUMMY), 
                                      .A2(b0_DUMMY), 
                                      .A3(d0_DUMMY), 
                                      .B0(XLXN_5), 
                                      .B1(XLXN_7), 
                                      .B2(XLXN_7), 
                                      .B3(XLXN_5), 
                                      .EQ(XLXN_8));
   VCC  XLXI_4 (.P(XLXN_5));
   GND  XLXI_5 (.G(XLXN_7));
   AND2  XLXI_9 (.I0(cl), 
                .I1(sw), 
                .O(XLXN_11));
   OR2  XLXI_10 (.I0(XLXN_11), 
                .I1(increase_one), 
                .O(XLXN_12));
endmodule
