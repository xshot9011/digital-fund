////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : myMultiplexer.vf
// /___/   /\     Timestamp : 10/23/2019 15:36:31
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/digitalWorkspace/lab7/myMultiplexer.vf -w C:/digitalWorkspace/lab7/myMultiplexer.sch
//Design Name: myMultiplexer
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_myMultiplexer (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale 100 ps / 10 ps

module FJKC_HXILINX_myMultiplexer(Q, C, CLR, J, K);
   
   output             Q;

   input 	      C;	
   input 	      CLR;	
   input              J;
   input              K;
   
   parameter INIT = 1'b0;
   reg                Q = INIT;


   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  Q <= 1'b0;
	else
        begin
           if(!J)
           begin
              if(K)
              Q <= 1'b0;
           end
           else
           begin
              if(!K)
              Q <= 1'b1;
              else 
              Q <= !Q;
           end
        end
     end
   
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_myMultiplexer (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 1ns / 1ps

module counter03_MUSER_myMultiplexer(CLOCK, 
                                     bit0, 
                                     bit1);

    input CLOCK;
   output bit0;
   output bit1;
   
   wire XLXN_1;
   wire bit0_DUMMY;
   
   assign bit0 = bit0_DUMMY;
   (* HU_SET = "XLXI_1_37" *) 
   FJKC_HXILINX_myMultiplexer  XLXI_1 (.C(CLOCK), 
                                      .CLR(), 
                                      .J(XLXN_1), 
                                      .K(XLXN_1), 
                                      .Q(bit0_DUMMY));
   (* HU_SET = "XLXI_2_38" *) 
   FJKC_HXILINX_myMultiplexer  XLXI_2 (.C(CLOCK), 
                                      .CLR(), 
                                      .J(bit0_DUMMY), 
                                      .K(bit0_DUMMY), 
                                      .Q(bit1));
   VCC  XLXI_3 (.P(XLXN_1));
endmodule
`timescale 1ns / 1ps

module myMultiplexer(beepIn, 
                     CLOCK, 
                     timeCom0, 
                     timeCom1, 
                     timeCom2, 
                     timeCom3, 
                     bcd, 
                     beepOut, 
                     common);

    input beepIn;
    input CLOCK;
    input [3:0] timeCom0;
    input [3:0] timeCom1;
    input [3:0] timeCom2;
    input [3:0] timeCom3;
   output [3:0] bcd;
   output beepOut;
   output [3:0] common;
   
   wire XLXN_43;
   wire XLXN_44;
   wire XLXN_45;
   wire XLXN_46;
   wire XLXN_166;
   wire XLXN_172;
   wire XLXN_177;
   wire XLXN_182;
   
   counter03_MUSER_myMultiplexer  XLXI_8 (.CLOCK(CLOCK), 
                                         .bit0(XLXN_166), 
                                         .bit1(XLXN_172));
   (* HU_SET = "XLXI_27_39" *) 
   D2_4E_HXILINX_myMultiplexer  XLXI_27 (.A0(XLXN_166), 
                                        .A1(XLXN_172), 
                                        .E(XLXN_177), 
                                        .D0(XLXN_43), 
                                        .D1(XLXN_44), 
                                        .D2(XLXN_45), 
                                        .D3(XLXN_46));
   INV  XLXI_29 (.I(XLXN_43), 
                .O(common[0]));
   INV  XLXI_30 (.I(XLXN_44), 
                .O(common[1]));
   INV  XLXI_31 (.I(XLXN_45), 
                .O(common[2]));
   INV  XLXI_32 (.I(XLXN_46), 
                .O(common[3]));
   (* HU_SET = "XLXI_38_43" *) 
   M4_1E_HXILINX_myMultiplexer  XLXI_38 (.D0(timeCom0[0]), 
                                        .D1(timeCom1[0]), 
                                        .D2(timeCom2[0]), 
                                        .D3(timeCom3[0]), 
                                        .E(XLXN_177), 
                                        .S0(XLXN_166), 
                                        .S1(XLXN_172), 
                                        .O(bcd[0]));
   (* HU_SET = "XLXI_53_40" *) 
   M4_1E_HXILINX_myMultiplexer  XLXI_53 (.D0(timeCom0[1]), 
                                        .D1(timeCom1[1]), 
                                        .D2(timeCom2[1]), 
                                        .D3(timeCom3[1]), 
                                        .E(XLXN_177), 
                                        .S0(XLXN_166), 
                                        .S1(XLXN_172), 
                                        .O(bcd[1]));
   (* HU_SET = "XLXI_54_41" *) 
   M4_1E_HXILINX_myMultiplexer  XLXI_54 (.D0(timeCom0[2]), 
                                        .D1(timeCom1[2]), 
                                        .D2(timeCom2[2]), 
                                        .D3(timeCom3[2]), 
                                        .E(XLXN_177), 
                                        .S0(XLXN_166), 
                                        .S1(XLXN_172), 
                                        .O(bcd[2]));
   (* HU_SET = "XLXI_55_42" *) 
   M4_1E_HXILINX_myMultiplexer  XLXI_55 (.D0(timeCom0[3]), 
                                        .D1(timeCom1[3]), 
                                        .D2(timeCom2[3]), 
                                        .D3(timeCom3[3]), 
                                        .E(XLXN_177), 
                                        .S0(XLXN_166), 
                                        .S1(XLXN_172), 
                                        .O(bcd[3]));
   VCC  XLXI_57 (.P(XLXN_177));
   (* HU_SET = "XLXI_58_44" *) 
   M4_1E_HXILINX_myMultiplexer  XLXI_58 (.D0(XLXN_182), 
                                        .D1(XLXN_182), 
                                        .D2(beepIn), 
                                        .D3(XLXN_182), 
                                        .E(XLXN_177), 
                                        .S0(XLXN_166), 
                                        .S1(XLXN_172), 
                                        .O(beepOut));
   GND  XLXI_60 (.G(XLXN_182));
endmodule
